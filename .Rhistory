nodes[i]$addNeighbour(nodes[j])
}
}
}
max_len = length(nodes)
dist <- matrix(max_len, nrow = length(nodes), ncol = length(nodes))
numPaths <- diag(length(nodes)) # Identity matrix
queue = c(Element(nodes[target], 0))
# Find all shortest paths from target node
for (node in nodes[target]$nbs) {
append(queue, Element(node, 1))
}
# Details of while loop explained later
while (!(length(queue) == 0)) {
elem = queue[1]
queue = queue[-1]
node = elem$node
if (node$id %in% Infd) {
next
}
if (dist[target, node] != max_len) {
next
}
dist[target, node] = elem$depth
dist[node, target] = elem$depth
for (nb in node$nbs) {
if (dist[target, nb$id] == max_len) {
search(queue, Element(nb, elem$depth + 1), 0, length(queue))
}
else if (dist[target, nb$id] == elem$depth - 1) {
numPaths[target, node$id] = numPaths[target, node$id] + numPaths[target, nb$id]
numPaths[node$id, target] = numPaths[node$id, target] + numPaths[target, nb$id]
}
}
}
n_unperc <- 0 # Stores number of pairs of nodes reachable by unpercolated paths
pbc <- 0 # Percolation betweenness centrality - continuously updated throughout simulation
for (id in Infd) {
queue = queue[-1:-length(queue)]
for (node in nodes[id]$nbs) {
append(queue, Element(node, 1))
}
reachable = vector(mode = "numeric")
while (!(length(queue) == 0)) {
# Retrieve lowest depth element and remove from queue
elem = queue[1]
queue = queue[-1]
node = elem$node
if (node$id %in% Infd) {
next
}
if (dist[id, node] != max_len) {
next
}
dist[id, node] = elem$depth
dist[node, id] = elem$depth
reachable = c(reachable, node$id)
for (nb in node$nbs) {
if (dist[id, nb$id] == max_len) {
# If neighbour is not visited, add neighbour to queue
search(queue, Element(nb, elem$depth + 1), 0, length(queue))
}
else if (dist[id, nb$id] == elem$depth - 1) {
# Update number of shortest paths from target to node
numPaths[id, node$id] = numPaths[id, node$id] + numPaths[id, nb$id]
numPaths[node$id, id] = numPaths[node$id, id] + numPaths[id, nb$id]
}
}
len <- dist[id, target] + dist[target, node$id]
if (len > dist[id, node$id]) {
next # None of the shortest paths pass through the target node
}
# Add proportion of shortest (unpercolated) paths between id and node which pass through target
pbc = pbc + (numPaths[id, target]*numPaths[target, node$id])/numPaths[id, node$id]
}
n_unperc = n_unperc + length(reachable)
}
pbc/n_unperc # Return final result
}
PercolationCentrality <- function(adjMat, Infd, target) {
# Infd - List of infected nodes
# adjMat - Adjacency Matrix
# target - Node to calculate centrality for
nodes <- vector(mode = "Node", length = nrow(adjMat))
for (i in 1:length(nodes)) {
nodes[i] = Node(id = i, nbs = list(NULL), tinf = 0)
}
for (i in 1:length(nodes)) {
for (j in 1:length(nodes)) {
if (adjMat[i, j] == 1) {
nodes[i]$addNeighbour(nodes[j])
}
}
}
max_len = length(nodes)
dist <- matrix(max_len, nrow = length(nodes), ncol = length(nodes))
numPaths <- diag(length(nodes)) # Identity matrix
queue = c(Element(nodes[target], 0))
# Find all shortest paths from target node
for (node in nodes[target]$nbs) {
append(queue, Element(node, 1))
}
# Details of while loop explained later
while (!(length(queue) == 0)) {
elem = queue[1]
queue = queue[-1]
node = elem$node
if (dist[target, node] != max_len) {
next
}
dist[target, node] = elem$depth
dist[node, target] = elem$depth
for (nb in node$nbs) {
if (dist[target, nb$id] == max_len) {
search(queue, Element(nb, elem$depth + 1), 0, length(queue))
}
else if (dist[target, nb$id] == elem$depth - 1) {
numPaths[target, node$id] = numPaths[target, node$id] + numPaths[target, nb$id]
numPaths[node$id, target] = numPaths[node$id, target] + numPaths[target, nb$id]
}
}
}
n_unperc <- 0 # Stores number of pairs of nodes reachable by unpercolated paths
pbc <- 0 # Percolation betweenness centrality - continuously updated throughout simulation
for (id in Infd) {
queue = queue[-1:-length(queue)]
for (node in nodes[id]$nbs) {
append(queue, Element(node, 1))
}
reachable = vector(mode = "numeric")
while (!(length(queue) == 0)) {
# Retrieve lowest depth element and remove from queue
elem = queue[1]
queue = queue[-1]
node = elem$node
if (dist[id, node] != max_len) {
next
}
dist[id, node] = elem$depth
dist[node, id] = elem$depth
reachable = c(reachable, node$id)
for (nb in node$nbs) {
if (dist[id, nb$id] == max_len) {
# If neighbour is not visited, add neighbour to queue
search(queue, Element(nb, elem$depth + 1), 0, length(queue))
}
else if (dist[id, nb$id] == elem$depth - 1) {
# Update number of shortest paths from target to node
numPaths[id, node$id] = numPaths[id, node$id] + numPaths[id, nb$id]
numPaths[node$id, id] = numPaths[node$id, id] + numPaths[id, nb$id]
}
}
len <- dist[id, target] + dist[target, node$id]
if (len > dist[id, node$id]) {
next # None of the shortest paths pass through the target node
}
# Add proportion of shortest (unpercolated) paths between id and node which pass through target
pbc = pbc + (numPaths[id, target]*numPaths[target, node$id])/numPaths[id, node$id]
}
n_unperc = n_unperc + length(reachable)
}
pbc/n_unperc # Return final result
}
# Run simulation and calculate the reproductive number
R0 <- function(adjMat, Infd, end, rate) {
nodes <- vector(mode = "Node", length = nrow(adjMat))
init_len <- length(Infd)
for (i in 1:length(nodes)) {
nodes[i] = Node(id = i, nbs = list(NULL), tinf = end + 1)
}
for (i in 1:length(nodes)) {
for (j in 1:length(nodes)) {
if (adjMat[i, j] == 1) {
nodes[i]$addNeighbour(nodes[j])
}
}
}
queue = vector(mode = "Element")
for (i in Infd) {
search(queue, Element(nodes[i], 0), 0, length(queue))
}
while (!(length(queue) == 0)) {
elem = queue[1]
queue = queue[-1]
node = elem$node
time = elem$depth
if (node$tinf < end + 1) {
next
}
if (elem$depth >= end) {
break
}
node$tinf = time
Infd = c(Infd, node$id)
for (nb in node$nbs) {
if (nb$tinf < time) {
next
}
t <- rexp(1, rate)
if (nb$tinf < time + t) {
next
}
search(queue, time + t, 0, length(queue))
}
}
length(Infd) - init_len # Return total number of new cases
}
debugSource("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
debugSource("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
debugSource("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
debugSource("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
debugSource("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
debugSource("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
R.Version()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
Node = setRefClass("Node", fields = list(id = "numeric"), methods = list(setId = function(x) {
self$id = x
}))
node = Node(1)
node$setId(2)
Node = setRefClass("Node", fields = list(id = "numeric"), methods = list(setId = function(x) {
id = x
}))
node = Node(1)
node$setId(2)
node$id
Node = setRefClass("Node", fields = list(id = "numeric"), methods = list(setId = function(x) {
id <<- x
}))
node = Node(1)
node$setId(2)
node$id
Node = setRefClass("Node", fields = list(id = "numeric"), methods = list(setId = function(x) {
id <<- x
}))
node = Node(id = 1)
node$setId(2)
node$id
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
system("ulimit -s")
system("ulimit -s 8192")
system("ulimit -s")
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
system("ulimit -s 8192")
system("ulimit")
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
install.packages("diffcorr")
install.packages("diffcor")
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
print(.Random.seed)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
print(reproductiveDiff)
cor(adjustedPercolationCentrality[1, -infd_nodes], reproductiveDiff[1, -infd_nodes], method = "spearman")
cor(percolationCentrality[1, -infd_nodes], reproductiveDiff[1, -infd_nodes], method = "spearman")
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
print(reproductiveDiff)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
print(adjustedPercolationCentrality)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
prob <- seq(0.4, 0.5, length.out = 3)
data <- data.frame(corrAdj = corrAdj, corrRaw = corrRaw, prob = prob)
data <- data.frame(corr = c(corrAdj, corrRaw), type = rep(c("adj", "raw"), each = 3), prob = rep(prob, 2))
ggplot(data, aes(x = prob, y = corr, colour = type)) + geom_bar(stat = "identity", position = "dodge")
library(ggplot2)
ggplot(data, aes(x = prob, y = corr, colour = type)) + geom_bar(stat = "identity", position = "dodge")
ggplot(data, aes(x = prob, y = corr, colour = type, fill = type)) + geom_bar(stat = "identity", position = "dodge")
data <- data.frame(corr = c(corrAdj, corrRaw), type = rep(c("Adjusted Percolation Centrality", "Perolation Centrality"), each = 3), prob = rep(prob, 2))
data$prob = factor(data$prob)
ggplot(data, aes(x = prob, y = corr, colour = type, fill = type)) + geom_bar(stat = "identity", position = "dodge")
data <- data.frame(corr = c(corrAdj, corrRaw), type = rep(c("Adjusted Percolation Centrality", "Perolation Centrality"), each = 3), p = rep(prob, 2))
data$p = factor(data$p)
data <- data.frame(corr = c(corrAdj, corrRaw), type = rep(c("Adjusted Percolation Centrality", "Percolation Centrality"), each = 3), p = rep(prob, 2))
data$p = factor(data$p)
ggplot(data, aes(x = p, y = corr, colour = type, fill = type)) + geom_bar(stat = "identity", position = "dodge")
library(dplyr)
library(ggplot2)
katz <- read.csv("Katz_Centrality.csv")
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
library(dplyr)
library(ggplot2)
katz <- read.csv("Katz_Centrality.csv")
katz <- katz %>% mutate(Centrality = round(Centrality, 6), TempDegree = round(TempDegree, 6))
tpp <- read.csv("tpp.csv")
absorb <- read.csv("AbsorptionCentrality.csv")
absorb <- absorb[rev(rownames(absorb)), ]
colnames(absorb) <- c("Node", "Absorb")
katz$Node = round(katz$Node, 0)
results = read.csv("Results.csv")
results = results[1:751, 1:751]
probs = apply(results, 2, mean)/1000
print(length(tpp$TP))
corKatz = cor(probs, katz$Centrality)
corDeg = cor(probs, katz$TempDegree)
corAbs = cor(probs, absorb$Absorb)
corTp = cor(probs, tpp$TP)
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
library(dplyr)
library(ggplot2)
katz <- read.csv("Katz_Centrality.csv")
katz <- katz %>% mutate(Centrality = round(Centrality, 6), TempDegree = round(TempDegree, 6))
tpp <- read.csv("tpp.csv")
absorb <- read.csv("AbsorptionCentrality.csv")
absorb <- absorb[rev(rownames(absorb)), ]
colnames(absorb) <- c("Node", "Absorb")
katz$Node = round(katz$Node, 0)
results = read.csv("Results.csv")
results = results[1:751, 1:751]
probs = apply(results, 2, mean)/1000
print(length(tpp$TP))
corKatz = cor(probs, katz$Centrality)
corDeg = cor(probs, katz$TempDegree)
corAbs = cor(probs, absorb$Absorb)
corTp = cor(probs, tpp$TP)
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
library(dplyr)
library(ggplot2)
katz <- read.csv("Katz_Centrality.csv")
katz <- katz %>% mutate(Centrality = round(Centrality, 6), TempDegree = round(TempDegree, 6))
tpp <- read.csv("tpp.csv")
absorb <- read.csv("AbsorptionCentrality.csv")
absorb <- absorb[rev(rownames(absorb)), ]
colnames(absorb) <- c("Node", "Absorb")
colnames(tpp) <- c("Node", "TP", "TPP")
katz$Node = round(katz$Node, 0)
results = read.csv("Results.csv")
results = results[1:751, 1:751]
probs = apply(results, 2, mean)/1000
print(length(tpp$TP))
corKatz = cor(probs, katz$Centrality)
corDeg = cor(probs, katz$TempDegree)
corAbs = cor(probs, absorb$Absorb)
corTp = cor(probs, tpp$TP)
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
library(dplyr)
library(ggplot2)
katz <- read.csv("Katz_Centrality.csv")
katz <- katz %>% mutate(Centrality = round(Centrality, 6), TempDegree = round(TempDegree, 6))
tpp <- read.csv("tpp.csv")
absorb <- read.csv("AbsorptionCentrality.csv")
absorb <- absorb[rev(rownames(absorb)), ]
colnames(absorb) <- c("Node", "Absorb")
colnames(tpp) <- c("Node", "TP", "TPP")
katz$Node = round(katz$Node, 0)
results = read.csv("Results.csv")
results = results[1:751, 1:751]
probs = apply(results, 2, mean)/1000
print(length(tpp$TP))
corKatz = cor(probs, katz$Centrality)
corDeg = cor(probs, katz$TempDegree)
corAbs = cor(probs, absorb$Absorb)
corTp = cor(probs, tpp$TP)
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
library(dplyr)
library(ggplot2)
katz <- read.csv("Katz_Centrality.csv")
katz <- katz %>% mutate(Centrality = round(Centrality, 6), TempDegree = round(TempDegree, 6))
tpp <- read.csv("tpp.csv", header = FALSE)
absorb <- read.csv("AbsorptionCentrality.csv")
absorb <- absorb[rev(rownames(absorb)), ]
colnames(absorb) <- c("Node", "Absorb")
colnames(tpp) <- c("Node", "TP", "TPP")
katz$Node = round(katz$Node, 0)
results = read.csv("Results.csv")
results = results[1:751, 1:751]
probs = apply(results, 2, mean)/1000
print(length(tpp$TP))
corKatz = cor(probs, katz$Centrality)
corDeg = cor(probs, katz$TempDegree)
corAbs = cor(probs, absorb$Absorb)
corTp = cor(probs, tpp$TP)
corTpp = cor(probs, tpp$TPP)
correlations = c(corKatz, corDeg, corAbs, corTp, corTpp)
names <- c("Katz Centrality", "Degree Centrality", "Absorption Centrality", "Temporal Closeness Rank", "Temporal Proximity Rank")
barplot(correlations, names.arg = names)
install.packages("ggcorrplot")
knitr::opts_knit$set(root.dir = getwd())
print(colnames(data))
library(ggcorrplot)
data <- data.frame(TP = tpp$TP, TPP = tpp$TPP, Absorb = absorb$Absorb, Katz = katz$Centrality, Degree = katz$TempDegree)
print(colnames(data))
install.packages("mvtnorm")
knitr::opts_knit$set(root.dir = getwd())
print(decTree$variable.importance)
setwd("C:/Users/nickw/Downloads/SI_Model")
install.packages("caret")
