source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
system("ulimit -s")
system("ulimit -s 8192")
system("ulimit -s")
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
system("ulimit -s 8192")
system("ulimit")
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
install.packages("diffcorr")
install.packages("diffcor")
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
print(.Random.seed)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
print(reproductiveDiff)
cor(adjustedPercolationCentrality[1, -infd_nodes], reproductiveDiff[1, -infd_nodes], method = "spearman")
cor(percolationCentrality[1, -infd_nodes], reproductiveDiff[1, -infd_nodes], method = "spearman")
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
traceback()
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
print(reproductiveDiff)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
print(adjustedPercolationCentrality)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
source("C:/Users/nickw/Downloads/SI_Model/AdjustedPercolationCentrality.R", echo=TRUE)
prob <- seq(0.4, 0.5, length.out = 3)
data <- data.frame(corrAdj = corrAdj, corrRaw = corrRaw, prob = prob)
data <- data.frame(corr = c(corrAdj, corrRaw), type = rep(c("adj", "raw"), each = 3), prob = rep(prob, 2))
ggplot(data, aes(x = prob, y = corr, colour = type)) + geom_bar(stat = "identity", position = "dodge")
library(ggplot2)
ggplot(data, aes(x = prob, y = corr, colour = type)) + geom_bar(stat = "identity", position = "dodge")
ggplot(data, aes(x = prob, y = corr, colour = type, fill = type)) + geom_bar(stat = "identity", position = "dodge")
data <- data.frame(corr = c(corrAdj, corrRaw), type = rep(c("Adjusted Percolation Centrality", "Perolation Centrality"), each = 3), prob = rep(prob, 2))
data$prob = factor(data$prob)
ggplot(data, aes(x = prob, y = corr, colour = type, fill = type)) + geom_bar(stat = "identity", position = "dodge")
data <- data.frame(corr = c(corrAdj, corrRaw), type = rep(c("Adjusted Percolation Centrality", "Perolation Centrality"), each = 3), p = rep(prob, 2))
data$p = factor(data$p)
data <- data.frame(corr = c(corrAdj, corrRaw), type = rep(c("Adjusted Percolation Centrality", "Percolation Centrality"), each = 3), p = rep(prob, 2))
data$p = factor(data$p)
ggplot(data, aes(x = p, y = corr, colour = type, fill = type)) + geom_bar(stat = "identity", position = "dodge")
library(dplyr)
library(ggplot2)
katz <- read.csv("Katz_Centrality.csv")
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
library(dplyr)
library(ggplot2)
katz <- read.csv("Katz_Centrality.csv")
katz <- katz %>% mutate(Centrality = round(Centrality, 6), TempDegree = round(TempDegree, 6))
tpp <- read.csv("tpp.csv")
absorb <- read.csv("AbsorptionCentrality.csv")
absorb <- absorb[rev(rownames(absorb)), ]
colnames(absorb) <- c("Node", "Absorb")
katz$Node = round(katz$Node, 0)
results = read.csv("Results.csv")
results = results[1:751, 1:751]
probs = apply(results, 2, mean)/1000
print(length(tpp$TP))
corKatz = cor(probs, katz$Centrality)
corDeg = cor(probs, katz$TempDegree)
corAbs = cor(probs, absorb$Absorb)
corTp = cor(probs, tpp$TP)
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
library(dplyr)
library(ggplot2)
katz <- read.csv("Katz_Centrality.csv")
katz <- katz %>% mutate(Centrality = round(Centrality, 6), TempDegree = round(TempDegree, 6))
tpp <- read.csv("tpp.csv")
absorb <- read.csv("AbsorptionCentrality.csv")
absorb <- absorb[rev(rownames(absorb)), ]
colnames(absorb) <- c("Node", "Absorb")
katz$Node = round(katz$Node, 0)
results = read.csv("Results.csv")
results = results[1:751, 1:751]
probs = apply(results, 2, mean)/1000
print(length(tpp$TP))
corKatz = cor(probs, katz$Centrality)
corDeg = cor(probs, katz$TempDegree)
corAbs = cor(probs, absorb$Absorb)
corTp = cor(probs, tpp$TP)
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
library(dplyr)
library(ggplot2)
katz <- read.csv("Katz_Centrality.csv")
katz <- katz %>% mutate(Centrality = round(Centrality, 6), TempDegree = round(TempDegree, 6))
tpp <- read.csv("tpp.csv")
absorb <- read.csv("AbsorptionCentrality.csv")
absorb <- absorb[rev(rownames(absorb)), ]
colnames(absorb) <- c("Node", "Absorb")
colnames(tpp) <- c("Node", "TP", "TPP")
katz$Node = round(katz$Node, 0)
results = read.csv("Results.csv")
results = results[1:751, 1:751]
probs = apply(results, 2, mean)/1000
print(length(tpp$TP))
corKatz = cor(probs, katz$Centrality)
corDeg = cor(probs, katz$TempDegree)
corAbs = cor(probs, absorb$Absorb)
corTp = cor(probs, tpp$TP)
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
library(dplyr)
library(ggplot2)
katz <- read.csv("Katz_Centrality.csv")
katz <- katz %>% mutate(Centrality = round(Centrality, 6), TempDegree = round(TempDegree, 6))
tpp <- read.csv("tpp.csv")
absorb <- read.csv("AbsorptionCentrality.csv")
absorb <- absorb[rev(rownames(absorb)), ]
colnames(absorb) <- c("Node", "Absorb")
colnames(tpp) <- c("Node", "TP", "TPP")
katz$Node = round(katz$Node, 0)
results = read.csv("Results.csv")
results = results[1:751, 1:751]
probs = apply(results, 2, mean)/1000
print(length(tpp$TP))
corKatz = cor(probs, katz$Centrality)
corDeg = cor(probs, katz$TempDegree)
corAbs = cor(probs, absorb$Absorb)
corTp = cor(probs, tpp$TP)
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
library(dplyr)
library(ggplot2)
katz <- read.csv("Katz_Centrality.csv")
katz <- katz %>% mutate(Centrality = round(Centrality, 6), TempDegree = round(TempDegree, 6))
tpp <- read.csv("tpp.csv", header = FALSE)
absorb <- read.csv("AbsorptionCentrality.csv")
absorb <- absorb[rev(rownames(absorb)), ]
colnames(absorb) <- c("Node", "Absorb")
colnames(tpp) <- c("Node", "TP", "TPP")
katz$Node = round(katz$Node, 0)
results = read.csv("Results.csv")
results = results[1:751, 1:751]
probs = apply(results, 2, mean)/1000
print(length(tpp$TP))
corKatz = cor(probs, katz$Centrality)
corDeg = cor(probs, katz$TempDegree)
corAbs = cor(probs, absorb$Absorb)
corTp = cor(probs, tpp$TP)
corTpp = cor(probs, tpp$TPP)
correlations = c(corKatz, corDeg, corAbs, corTp, corTpp)
names <- c("Katz Centrality", "Degree Centrality", "Absorption Centrality", "Temporal Closeness Rank", "Temporal Proximity Rank")
barplot(correlations, names.arg = names)
install.packages("ggcorrplot")
knitr::opts_knit$set(root.dir = getwd())
print(colnames(data))
library(ggcorrplot)
data <- data.frame(TP = tpp$TP, TPP = tpp$TPP, Absorb = absorb$Absorb, Katz = katz$Centrality, Degree = katz$TempDegree)
print(colnames(data))
install.packages("mvtnorm")
library(MASS)
set.seed(134567)
varcov1 <- matrix(c(10, 2, 2, 10), ncol = 2, nrow = 2)
varcov2 <- matrix(c(10, 5, 5, 10), ncol = 2, nrow = 2)
varcov3 <- matrix(c(10, 7, 7, 10), nrow = 2, ncol = 2)
corr <- c(2/10, 5/10, 7/10)
sample1 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov1)
sample2 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov2)
sample3 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov3)
res = c()
for (samp in list(sample1, sample2, sample3)) {
x <- samp[, 1]
y <- samp[, 2]
len = length(x)
table = matrix(ncol = 6, nrow = 6)
xLab = vector(length = len)
yLab = vector(length = len)
xLab[which(x <= 30)] = "A"
xLab[which(x > 30 & x <= 40)] = "B"
xLab[which(x > 40 & x <= 50)] = "C"
xLab[which(x > 50 & x <= 60)] = "D"
xLab[which(x > 60 & x <= 70)] = "E"
xLab[which(x > 70)] = "F"
yLab[which(y <= 30)] = "G"
yLab[which(y > 30 & y <= 40)] = "H"
yLab[which(y > 40 & y <= 50)] = "I"
yLab[which(y > 50 & y <= 60)] = "J"
yLab[which(y > 60 & y <= 70)] = "K"
yLab[which(y > 70)] = "L"
data <- data.frame(x = xLab, y = yLab)
tab = table(data)
matrix = as.matrix(as.data.frame(tab))
print(matrix)
res = c(res, det(matrix)/prod(rowSums(matrix)))
}
library(MASS)
set.seed(134567)
varcov1 <- matrix(c(10, 2, 2, 10), ncol = 2, nrow = 2)
varcov2 <- matrix(c(10, 5, 5, 10), ncol = 2, nrow = 2)
varcov3 <- matrix(c(10, 7, 7, 10), nrow = 2, ncol = 2)
corr <- c(2/10, 5/10, 7/10)
sample1 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov1)
sample2 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov2)
sample3 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov3)
res = c()
for (samp in list(sample1, sample2, sample3)) {
x <- samp[, 1]
y <- samp[, 2]
len = length(x)
table = matrix(ncol = 6, nrow = 6)
xLab = vector(length = len)
yLab = vector(length = len)
xLab[which(x <= 30)] = "A"
xLab[which(x > 30 & x <= 40)] = "B"
xLab[which(x > 40 & x <= 50)] = "C"
xLab[which(x > 50 & x <= 60)] = "D"
xLab[which(x > 60 & x <= 70)] = "E"
xLab[which(x > 70)] = "F"
yLab[which(y <= 30)] = "G"
yLab[which(y > 30 & y <= 40)] = "H"
yLab[which(y > 40 & y <= 50)] = "I"
yLab[which(y > 50 & y <= 60)] = "J"
yLab[which(y > 60 & y <= 70)] = "K"
yLab[which(y > 70)] = "L"
data <- data.frame(x = xLab, y = yLab)
tab = table(data)
matrix = as.matrix(tab)
print(matrix)
res = c(res, det(matrix)/prod(rowSums(matrix)))
}
library(MASS)
set.seed(134567)
varcov1 <- matrix(c(10, 2, 2, 10), ncol = 2, nrow = 2)
varcov2 <- matrix(c(10, 5, 5, 10), ncol = 2, nrow = 2)
varcov3 <- matrix(c(10, 7, 7, 10), nrow = 2, ncol = 2)
corr <- c(2/10, 5/10, 7/10)
sample1 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov1)
sample2 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov2)
sample3 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov3)
res = c()
for (samp in list(sample1, sample2, sample3)) {
x <- samp[, 1]
y <- samp[, 2]
len = length(x)
table = matrix(ncol = 6, nrow = 6)
xLab = vector(length = len)
yLab = vector(length = len)
xLab[which(x <= 30)] = "A"
xLab[which(x > 30 & x <= 40)] = "B"
xLab[which(x > 40 & x <= 50)] = "C"
xLab[which(x > 50 & x <= 60)] = "D"
xLab[which(x > 60 & x <= 70)] = "E"
xLab[which(x > 70)] = "F"
yLab[which(y <= 30)] = "G"
yLab[which(y > 30 & y <= 40)] = "H"
yLab[which(y > 40 & y <= 50)] = "I"
yLab[which(y > 50 & y <= 60)] = "J"
yLab[which(y > 60 & y <= 70)] = "K"
yLab[which(y > 70)] = "L"
data <- data.frame(x = xLab, y = yLab)
tab = table(data)
matrix = matrix(tab, ncol = ncol(tab))
print(matrix)
res = c(res, det(matrix)/prod(rowSums(matrix)))
}
library(MASS)
set.seed(134567)
varcov1 <- matrix(c(10, 2, 2, 10), ncol = 2, nrow = 2, byrow = TRUE)
varcov2 <- matrix(c(10, 5, 5, 10), ncol = 2, nrow = 2, byrow = TRUE)
varcov3 <- matrix(c(10, 7, 7, 10), nrow = 2, ncol = 2, byrow = TRUE)
corr <- c(2/10, 5/10, 7/10)
sample1 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov1)
sample2 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov2)
sample3 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov3)
res = c()
for (samp in list(sample1, sample2, sample3)) {
x <- samp[, 1]
y <- samp[, 2]
len = length(x)
table = matrix(ncol = 6, nrow = 6)
xLab = vector(length = len)
yLab = vector(length = len)
xLab[which(x <= 30)] = "A"
xLab[which(x > 30 & x <= 40)] = "B"
xLab[which(x > 40 & x <= 50)] = "C"
xLab[which(x > 50 & x <= 60)] = "D"
xLab[which(x > 60 & x <= 70)] = "E"
xLab[which(x > 70)] = "F"
yLab[which(y <= 30)] = "G"
yLab[which(y > 30 & y <= 40)] = "H"
yLab[which(y > 40 & y <= 50)] = "I"
yLab[which(y > 50 & y <= 60)] = "J"
yLab[which(y > 60 & y <= 70)] = "K"
yLab[which(y > 70)] = "L"
tab = table(xLab, yLab)
matrix = matrix(tab, ncol = ncol(tab), dimnames = dimnames(tab))
print(matrix)
res = c(res, det(matrix)/prod(rowSums(matrix)))
}
library(MASS)
set.seed(1345)
varcov1 <- matrix(c(10, 2, 2, 10), ncol = 2, nrow = 2, byrow = TRUE)
varcov2 <- matrix(c(10, 5, 5, 10), ncol = 2, nrow = 2, byrow = TRUE)
varcov3 <- matrix(c(10, 7, 7, 10), nrow = 2, ncol = 2, byrow = TRUE)
corr <- c(2/10, 5/10, 7/10)
sample1 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov1)
sample2 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov2)
sample3 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov3)
res = c()
for (samp in list(sample1, sample2, sample3)) {
x <- samp[, 1]
y <- samp[, 2]
len = length(x)
table = matrix(ncol = 6, nrow = 6)
xLab = vector(length = len)
yLab = vector(length = len)
xLab[which(x <= 30)] = "A"
xLab[which(x > 30 & x <= 40)] = "B"
xLab[which(x > 40 & x <= 50)] = "C"
xLab[which(x > 50 & x <= 60)] = "D"
xLab[which(x > 60 & x <= 70)] = "E"
xLab[which(x > 70)] = "F"
yLab[which(y <= 30)] = "G"
yLab[which(y > 30 & y <= 40)] = "H"
yLab[which(y > 40 & y <= 50)] = "I"
yLab[which(y > 50 & y <= 60)] = "J"
yLab[which(y > 60 & y <= 70)] = "K"
yLab[which(y > 70)] = "L"
tab = table(xLab, yLab)
matrix = matrix(tab, ncol = ncol(tab), dimnames = dimnames(tab))
print(matrix)
res = c(res, det(matrix)/prod(rowSums(matrix)))
}
df <- data.frame(correlation = corr, lambda = res)
knitr::kable(df)
install.packages("rockchalk")
library(MASS)
library(rockchalk)
set.seed(1345)
varcov1 <- matrix(c(10, 2, 2, 10), ncol = 2, nrow = 2, byrow = TRUE)
varcov2 <- matrix(c(10, 5, 5, 10), ncol = 2, nrow = 2, byrow = TRUE)
varcov3 <- matrix(c(10, 7, 7, 10), nrow = 2, ncol = 2, byrow = TRUE)
corr <- c(2/10, 5/10, 7/10)
sample1 <- rockchalk::mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov1)
sample2 <- rockchalk::mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov2)
sample3 <- rockchalk::mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov3)
res = c()
for (samp in list(sample1, sample2, sample3)) {
x <- samp[, 1]
y <- samp[, 2]
len = length(x)
table = matrix(ncol = 6, nrow = 6)
xLab = vector(length = len)
yLab = vector(length = len)
xLab[which(x <= 30)] = "A"
xLab[which(x > 30 & x <= 40)] = "B"
xLab[which(x > 40 & x <= 50)] = "C"
xLab[which(x > 50 & x <= 60)] = "D"
xLab[which(x > 60 & x <= 70)] = "E"
xLab[which(x > 70)] = "F"
yLab[which(y <= 30)] = "G"
yLab[which(y > 30 & y <= 40)] = "H"
yLab[which(y > 40 & y <= 50)] = "I"
yLab[which(y > 50 & y <= 60)] = "J"
yLab[which(y > 60 & y <= 70)] = "K"
yLab[which(y > 70)] = "L"
tab = table(xLab, yLab)
matrix = matrix(tab, ncol = ncol(tab), dimnames = dimnames(tab))
print(matrix)
res = c(res, det(matrix)/prod(rowSums(matrix)))
}
library(MASS)
library(rockchalk)
set.seed(1377785)
varcov1 <- matrix(c(10, 2, 2, 10), ncol = 2, nrow = 2, byrow = TRUE)
varcov2 <- matrix(c(10, 5, 5, 10), ncol = 2, nrow = 2, byrow = TRUE)
varcov3 <- matrix(c(10, 7, 7, 10), nrow = 2, ncol = 2, byrow = TRUE)
corr <- c(2/10, 5/10, 7/10)
sample1 <- rockchalk::mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov1)
sample2 <- rockchalk::mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov2)
sample3 <- rockchalk::mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov3)
res = c()
for (samp in list(sample1, sample2, sample3)) {
x <- samp[, 1]
y <- samp[, 2]
len = length(x)
xLab = vector(length = len)
yLab = vector(length = len)
xLab[which(x <= 30)] = "A"
xLab[which(x > 30 & x <= 40)] = "B"
xLab[which(x > 40 & x <= 50)] = "C"
xLab[which(x > 50 & x <= 60)] = "D"
xLab[which(x > 60 & x <= 70)] = "E"
xLab[which(x > 70)] = "F"
yLab[which(y <= 30)] = "G"
yLab[which(y > 30 & y <= 40)] = "H"
yLab[which(y > 40 & y <= 50)] = "I"
yLab[which(y > 50 & y <= 60)] = "J"
yLab[which(y > 60 & y <= 70)] = "K"
yLab[which(y > 70)] = "L"
tab = table(xLab, yLab)
matrix = matrix(tab, ncol = ncol(tab), dimnames = dimnames(tab))
print(matrix)
res = c(res, det(matrix)/prod(rowSums(matrix)))
}
library(MASS)
library(rockchalk)
set.seed(13775)
varcov1 <- matrix(c(10, 2, 2, 10), ncol = 2, nrow = 2, byrow = TRUE)
set.seed(78992)
varcov2 <- matrix(c(10, 5, 5, 10), ncol = 2, nrow = 2, byrow = TRUE)
set.seed(43356)
varcov3 <- matrix(c(10, 7, 7, 10), nrow = 2, ncol = 2, byrow = TRUE)
corr <- c(2/10, 5/10, 7/10)
sample1 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov1)
sample2 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov2)
sample3 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov3)
res = c()
for (samp in list(sample1, sample2, sample3)) {
x <- samp[, 1]
y <- samp[, 2]
len = length(x)
xLab = vector(length = len)
yLab = vector(length = len)
xLab[which(x <= 30)] = "A"
xLab[which(x > 30 & x <= 40)] = "B"
xLab[which(x > 40 & x <= 50)] = "C"
xLab[which(x > 50 & x <= 60)] = "D"
xLab[which(x > 60 & x <= 70)] = "E"
xLab[which(x > 70)] = "F"
yLab[which(y <= 30)] = "G"
yLab[which(y > 30 & y <= 40)] = "H"
yLab[which(y > 40 & y <= 50)] = "I"
yLab[which(y > 50 & y <= 60)] = "J"
yLab[which(y > 60 & y <= 70)] = "K"
yLab[which(y > 70)] = "L"
tab = table(xLab, yLab)
matrix = matrix(tab, ncol = ncol(tab), dimnames = dimnames(tab))
print(matrix)
res = c(res, det(matrix)/prod(rowSums(matrix)))
}
install.packages("Rfast")
install.packages("Directional")
install.packages("circular")
rm(list = ls())
setwd("C:/Users/nickw/Downloads/SI_Model")
install.packages("pander")
install.packages("Metrics")
