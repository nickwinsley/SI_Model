xLab[which(x > 70)] = "F"
yLab[which(y <= 30)] = "G"
yLab[which(y > 30 & y <= 40)] = "H"
yLab[which(y > 40 & y <= 50)] = "I"
yLab[which(y > 50 & y <= 60)] = "J"
yLab[which(y > 60 & y <= 70)] = "K"
yLab[which(y > 70)] = "L"
tab = table(xLab, yLab)
matrix = matrix(tab, ncol = ncol(tab), dimnames = dimnames(tab))
print(matrix)
res = c(res, det(matrix)/prod(rowSums(matrix)))
}
library(MASS)
library(rockchalk)
set.seed(1377785)
varcov1 <- matrix(c(10, 2, 2, 10), ncol = 2, nrow = 2, byrow = TRUE)
varcov2 <- matrix(c(10, 5, 5, 10), ncol = 2, nrow = 2, byrow = TRUE)
varcov3 <- matrix(c(10, 7, 7, 10), nrow = 2, ncol = 2, byrow = TRUE)
corr <- c(2/10, 5/10, 7/10)
sample1 <- rockchalk::mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov1)
sample2 <- rockchalk::mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov2)
sample3 <- rockchalk::mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov3)
res = c()
for (samp in list(sample1, sample2, sample3)) {
x <- samp[, 1]
y <- samp[, 2]
len = length(x)
xLab = vector(length = len)
yLab = vector(length = len)
xLab[which(x <= 30)] = "A"
xLab[which(x > 30 & x <= 40)] = "B"
xLab[which(x > 40 & x <= 50)] = "C"
xLab[which(x > 50 & x <= 60)] = "D"
xLab[which(x > 60 & x <= 70)] = "E"
xLab[which(x > 70)] = "F"
yLab[which(y <= 30)] = "G"
yLab[which(y > 30 & y <= 40)] = "H"
yLab[which(y > 40 & y <= 50)] = "I"
yLab[which(y > 50 & y <= 60)] = "J"
yLab[which(y > 60 & y <= 70)] = "K"
yLab[which(y > 70)] = "L"
tab = table(xLab, yLab)
matrix = matrix(tab, ncol = ncol(tab), dimnames = dimnames(tab))
print(matrix)
res = c(res, det(matrix)/prod(rowSums(matrix)))
}
library(MASS)
library(rockchalk)
set.seed(13775)
varcov1 <- matrix(c(10, 2, 2, 10), ncol = 2, nrow = 2, byrow = TRUE)
set.seed(78992)
varcov2 <- matrix(c(10, 5, 5, 10), ncol = 2, nrow = 2, byrow = TRUE)
set.seed(43356)
varcov3 <- matrix(c(10, 7, 7, 10), nrow = 2, ncol = 2, byrow = TRUE)
corr <- c(2/10, 5/10, 7/10)
sample1 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov1)
sample2 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov2)
sample3 <- mvrnorm(n = 1000, mu = c(50, 50), Sigma = varcov3)
res = c()
for (samp in list(sample1, sample2, sample3)) {
x <- samp[, 1]
y <- samp[, 2]
len = length(x)
xLab = vector(length = len)
yLab = vector(length = len)
xLab[which(x <= 30)] = "A"
xLab[which(x > 30 & x <= 40)] = "B"
xLab[which(x > 40 & x <= 50)] = "C"
xLab[which(x > 50 & x <= 60)] = "D"
xLab[which(x > 60 & x <= 70)] = "E"
xLab[which(x > 70)] = "F"
yLab[which(y <= 30)] = "G"
yLab[which(y > 30 & y <= 40)] = "H"
yLab[which(y > 40 & y <= 50)] = "I"
yLab[which(y > 50 & y <= 60)] = "J"
yLab[which(y > 60 & y <= 70)] = "K"
yLab[which(y > 70)] = "L"
tab = table(xLab, yLab)
matrix = matrix(tab, ncol = ncol(tab), dimnames = dimnames(tab))
print(matrix)
res = c(res, det(matrix)/prod(rowSums(matrix)))
}
install.packages("Rfast")
install.packages("Directional")
install.packages("circular")
rm(list = ls())
df <- read.csv("chol_data.csv")
df$chol <- rank(df$chol, ties.method = "min")
df$bp <- rank(df$bp, ties.method = "min")
response <- cbind(df$yes, df$no)
model <- glm(response ~ chol + bp, family = binomial(), data = df)
summary(model)
df <- read.csv("chol_data.csv")
df$chol <- rank(df$chol, ties.method = "min")
df$bp <- rank(df$bp, ties.method = "min")
response <- cbind(df$yes, df$no)
model <- glm(response ~ chol + bp, family = binomial(), data = df)
summary(model)
model2 <- glm(response ~ chol + bp + chol*bp, family = binomial(), data = df)
best_model <- stepAIC(model2, scale = 0, trace = 1, direction = "backward")
library(MASS)
model2 <- glm(response ~ chol + bp + chol*bp, family = binomial(), data = df)
best_model <- stepAIC(model2, scale = 0, trace = 1, direction = "backward")
summary(best_model)
library(MASS)
model2 <- glm(response ~ chol + bp + chol*bp, family = binomial(), data = df)
best_model <- stepAIC(model2, scale = 0, trace = 1, direction = "backward")
summary(best_model$anova)
library(MASS)
model2 <- glm(response ~ chol + bp + chol*bp, family = binomial(), data = df)
best_model <- stepAIC(model2, scale = 0, trace = 1, direction = "backward")
summary(best_model)
df <- read.csv("surgery2.csv", stringsAsFactors = TRUE)
colnames(df)[colnames(df) == "T"] <- "Tf"
model <- glm(Y ~ D + Tf, family = "binomial", data = df)
summary(model)
df <- read.csv("surgery2.csv", stringsAsFactors = TRUE)
colnames(df)[colnames(df) == "T"] <- "Tf"
model <- glm(Y ~ D + Tf, family = "binomial", data = df)
summary(model)
anova(model)
model2 <- glm(Y ~ D, family = "binomial", data = df)
diff <- model$deviance - model2$deviance
df_diff <- model$df.residual - model2$df.residual
pVal <- 1 - pchisq(diff, df_diff)
model2 <- glm(Y ~ D, family = "binomial", data = df)
diff <- model2$deviance - model$deviance
df_diff <- model2$df.residual - model$df.residual
pVal <- 1 - pchisq(diff, df_diff)
model2 <- glm(Y ~ D, family = "binomial", data = df)
diff <- model2$deviance - model$deviance
df_diff <- model2$df.residual - model$df.residual
pVal <- 1 - pchisq(diff, df_diff)
pVal
install.packages("generalhoslem")
library(generalhoslem)
model2 <- glm(Y ~ D, family = "binomial", data = df)
diff <- model2$deviance - model$deviance
df_diff <- model2$df.residual - model$df.residual
pVal <- 1 - pchisq(diff, df_diff)
pVal
library(generalhoslem)
logitgof(df$Y, fitted(model))
library(generalhoslem)
logitgof(df$Y, fitted(model))
library(generalhoslem)
logitgof(df$Y, fitted(model), g = 5)
model <- glm(Sa.bin ~ as.factor(C) + S + W + Wt)
model <- glm(Sa.bin ~ as.factor(C) + S + W + Wt, family = binomial(), data = crab.table)
crab.table <- read.table("crab.ssc", col.names = c("C", "S", "W", "Sa", "Wt"))
crab.table$Sa.bin <- ifelse(crab.table$Sa > 0, 1, 0)
crab.table$C <- crab.table$C - 1
model <- glm(Sa.bin ~ as.factor(C) + S + W + Wt, family = binomial(), data = crab.table)
summary(model)
model <- glm(Sa.bin ~ relevel(as.factor(C), ref = 2) + S + W + Wt, family = binomial(), data = crab.table)
summary(model)
model <- glm(Sa.bin ~ C + S + W + Wt, family = binomial(), data = crab.table)
summary(model)
aic1 <- AIC(model)
aic2 <- AIC(model2)
print(paste("AIC with Colour as factor variable: ", aic1))
print(paste("AIC with Colour as ordinal variable: ", aic2))
setwd("C:/Users/nickw/Downloads/SI_Model")
install.packages("Bessel")
g <- c("Male", "Female")
i <- c("Support", "Oppose")
h <- c("Support", "Oppose")
df <- expand.grid(G = g, I = i, H = h)
print(df)
model <- glm(Y ~ G * I + G * H + I * H, family = poisson, data = df)
y <- c(76, 114, 6, 11, 160, 181, 25, 48)
df$Y <- y
model <- glm(Y ~ G * I + G * H + I * H, family = poisson, data = df)
summary(model)
null.dev <- summary(model)$null.deviance
resid.dev <- summary(model)$deviance
df.diff <- summary(model)$df.null - summary(model)$df.residual
test.stat <- null.dev - resid.dev
p.val <- pchisq(test.stat, df = df.diff, lower.tail = FALSE)
print(paste("Deviance Test Statistic: ", round(test.stat, 4)))
print(paste("P-value: ", round(p.val, 4)))
null.dev <- summary(model)$null.deviance
resid.dev <- summary(model)$deviance
df.diff <- summary(model)$df.null - summary(model)$df.residual
test.stat <- null.dev - resid.dev
p.val <- pchisq(test.stat, df = df.diff, lower.tail = FALSE)
print(paste("Deviance Test Statistic: ", round(test.stat, 4)))
print(paste("P-value: ", round(p.val, 8)))
df.diff <- df.residual(model)
test.stat <- deviance(model)
p.val <- pchisq(test.stat, df = df.diff, lower.tail = FALSE)
print(paste("Deviance Test Statistic: ", round(test.stat, 4)))
print(paste("P-value: ", round(p.val, 8)))
coef_summary <- summary(model)$coefficients
row <- coef_summary["G:I", ]
coef_summary <- summary(model)$coefficients
row <- coef_summary["GFemale:IOppose", ]
print(row)
summary(model)
library(geepack)
library(tidyr)
suppressPackageStartupMessages(library(dplyr))
gender <- c(rep("Male", 813), rep("Female", 1037))
beta1 <- c(c(rep(1, 342), rep(1, 26), rep(0, 6), rep(0, 21), rep(1, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(0, 14), rep(0, 18), rep(1, 14), rep(1, 47), rep(0, 22), rep(0, 457)))
beta2 <- c(c(rep(1, 342), rep(1, 26), rep(1, 6), rep(1, 21), rep(0, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(1, 14), rep(1, 18), rep(0, 14), rep(0, 47), rep(0, 22), rep(0, 457)))
beta3 <- c(c(rep(1, 342), rep(0, 26), rep(1, 6), rep(0, 21), rep(1, 11), rep(0, 32), rep(1, 19), rep(0, 356)), c(rep(1, 440), rep(0, 25), rep(1, 14), rep(0, 18), rep(1, 14), rep(0, 47), rep(1, 22), rep(0, 457)))
id <- 1:length(gender)
df <- data.frame(ID = id, Gender = gender, Beta1 = beta1, Beta2 = beta2, Beta3 = beta3)
df <- df %>% pivot_longer(cols = c("Beta1", "Beta2", "Beta3"), names_to = "time", values_to = "Y")
convertBeta <- function(beta) {
if (beta == "Beta1") {
return(1)
}
else if (beta == "Beta2") {
return(2)
}
else if (beta == "Beta3") {
return(3)
}
return(0)
}
df$time <- as.factor(unlist(lapply(df$time, convertBeta)))
df$Gender <- as.factor(df$Gender)
df$Y <- as.factor(df$Y)
print(df$Y[is.na(df$Y)])
library(geepack)
library(tidyr)
suppressPackageStartupMessages(library(dplyr))
gender <- c(rep("Male", 813), rep("Female", 1037))
beta1 <- c(c(rep(1, 342), rep(1, 26), rep(0, 6), rep(0, 21), rep(1, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(0, 14), rep(0, 18), rep(1, 14), rep(1, 47), rep(0, 22), rep(0, 457)))
beta2 <- c(c(rep(1, 342), rep(1, 26), rep(1, 6), rep(1, 21), rep(0, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(1, 14), rep(1, 18), rep(0, 14), rep(0, 47), rep(0, 22), rep(0, 457)))
beta3 <- c(c(rep(1, 342), rep(0, 26), rep(1, 6), rep(0, 21), rep(1, 11), rep(0, 32), rep(1, 19), rep(0, 356)), c(rep(1, 440), rep(0, 25), rep(1, 14), rep(0, 18), rep(1, 14), rep(0, 47), rep(1, 22), rep(0, 457)))
id <- 1:length(gender)
df <- data.frame(ID = id, Gender = gender, Beta1 = beta1, Beta2 = beta2, Beta3 = beta3)
df <- df %>% pivot_longer(cols = c("Beta1", "Beta2", "Beta3"), names_to = "time", values_to = "Y")
convertBeta <- function(beta) {
if (beta == "Beta1") {
return(1)
}
else if (beta == "Beta2") {
return(2)
}
else if (beta == "Beta3") {
return(3)
}
return(0)
}
df$time <- as.factor(unlist(lapply(df$time, convertBeta)))
df$Gender <- as.factor(df$Gender)
df$Y <- as.factor(df$Y)
print(df$Y[is.na(df$Y) | is.infinite(df$Y)])
library(geepack)
library(tidyr)
suppressPackageStartupMessages(library(dplyr))
gender <- c(rep("Male", 813), rep("Female", 1037))
beta1 <- c(c(rep(1, 342), rep(1, 26), rep(0, 6), rep(0, 21), rep(1, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(0, 14), rep(0, 18), rep(1, 14), rep(1, 47), rep(0, 22), rep(0, 457)))
beta2 <- c(c(rep(1, 342), rep(1, 26), rep(1, 6), rep(1, 21), rep(0, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(1, 14), rep(1, 18), rep(0, 14), rep(0, 47), rep(0, 22), rep(0, 457)))
beta3 <- c(c(rep(1, 342), rep(0, 26), rep(1, 6), rep(0, 21), rep(1, 11), rep(0, 32), rep(1, 19), rep(0, 356)), c(rep(1, 440), rep(0, 25), rep(1, 14), rep(0, 18), rep(1, 14), rep(0, 47), rep(1, 22), rep(0, 457)))
id <- 1:length(gender)
df <- data.frame(ID = id, Gender = gender, Beta1 = beta1, Beta2 = beta2, Beta3 = beta3)
df <- df %>% pivot_longer(cols = c("Beta1", "Beta2", "Beta3"), names_to = "time", values_to = "Y")
convertBeta <- function(beta) {
if (beta == "Beta1") {
return(1)
}
else if (beta == "Beta2") {
return(2)
}
else if (beta == "Beta3") {
return(3)
}
return(0)
}
df$time <- as.factor(unlist(lapply(df$time, convertBeta)))
df$Gender <- as.factor(df$Gender)
df$Y <- as.factor(df$Y)
print(df$Y[is.na(df$Y) | is.infinite(df$Y)])
library(geepack)
library(tidyr)
suppressPackageStartupMessages(library(dplyr))
gender <- c(rep("Male", 813), rep("Female", 1037))
beta1 <- c(c(rep(1, 342), rep(1, 26), rep(0, 6), rep(0, 21), rep(1, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(0, 14), rep(0, 18), rep(1, 14), rep(1, 47), rep(0, 22), rep(0, 457)))
beta2 <- c(c(rep(1, 342), rep(1, 26), rep(1, 6), rep(1, 21), rep(0, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(1, 14), rep(1, 18), rep(0, 14), rep(0, 47), rep(0, 22), rep(0, 457)))
beta3 <- c(c(rep(1, 342), rep(0, 26), rep(1, 6), rep(0, 21), rep(1, 11), rep(0, 32), rep(1, 19), rep(0, 356)), c(rep(1, 440), rep(0, 25), rep(1, 14), rep(0, 18), rep(1, 14), rep(0, 47), rep(1, 22), rep(0, 457)))
id <- 1:length(gender)
df <- data.frame(ID = id, Gender = gender, Beta1 = beta1, Beta2 = beta2, Beta3 = beta3)
df <- df %>% pivot_longer(cols = c("Beta1", "Beta2", "Beta3"), names_to = "time", values_to = "Y")
convertBeta <- function(beta) {
if (beta == "Beta1") {
return(1)
}
else if (beta == "Beta2") {
return(2)
}
else if (beta == "Beta3") {
return(3)
}
return(0)
}
df$time <- as.factor(unlist(lapply(df$time, convertBeta)))
df$Gender <- as.factor(df$Gender)
df$Y <- as.factor(df$Y)
print(df$Y[is.nan(df$Y) | is.infinite(df$Y)])
library(geepack)
library(tidyr)
suppressPackageStartupMessages(library(dplyr))
gender <- c(rep("Male", 813), rep("Female", 1037))
beta1 <- c(c(rep(1, 342), rep(1, 26), rep(0, 6), rep(0, 21), rep(1, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(0, 14), rep(0, 18), rep(1, 14), rep(1, 47), rep(0, 22), rep(0, 457)))
beta2 <- c(c(rep(1, 342), rep(1, 26), rep(1, 6), rep(1, 21), rep(0, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(1, 14), rep(1, 18), rep(0, 14), rep(0, 47), rep(0, 22), rep(0, 457)))
beta3 <- c(c(rep(1, 342), rep(0, 26), rep(1, 6), rep(0, 21), rep(1, 11), rep(0, 32), rep(1, 19), rep(0, 356)), c(rep(1, 440), rep(0, 25), rep(1, 14), rep(0, 18), rep(1, 14), rep(0, 47), rep(1, 22), rep(0, 457)))
id <- 1:length(gender)
df <- data.frame(ID = id, Gender = gender, Beta1 = beta1, Beta2 = beta2, Beta3 = beta3)
df <- df %>% pivot_longer(cols = c("Beta1", "Beta2", "Beta3"), names_to = "time", values_to = "Y")
convertBeta <- function(beta) {
if (beta == "Beta1") {
return(1)
}
else if (beta == "Beta2") {
return(2)
}
else if (beta == "Beta3") {
return(3)
}
return(0)
}
df$time <- as.factor(unlist(lapply(df$time, convertBeta)))
df$Gender <- as.factor(df$Gender)
df$Y <- as.factor(df$Y)
print(df)
library(geepack)
library(tidyr)
suppressPackageStartupMessages(library(dplyr))
gender <- c(rep("Male", 813), rep("Female", 1037))
beta1 <- c(c(rep(1, 342), rep(1, 26), rep(0, 6), rep(0, 21), rep(1, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(0, 14), rep(0, 18), rep(1, 14), rep(1, 47), rep(0, 22), rep(0, 457)))
beta2 <- c(c(rep(1, 342), rep(1, 26), rep(1, 6), rep(1, 21), rep(0, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(1, 14), rep(1, 18), rep(0, 14), rep(0, 47), rep(0, 22), rep(0, 457)))
beta3 <- c(c(rep(1, 342), rep(0, 26), rep(1, 6), rep(0, 21), rep(1, 11), rep(0, 32), rep(1, 19), rep(0, 356)), c(rep(1, 440), rep(0, 25), rep(1, 14), rep(0, 18), rep(1, 14), rep(0, 47), rep(1, 22), rep(0, 457)))
id <- 1:length(gender)
df <- data.frame(ID = id, Gender = gender, Beta1 = beta1, Beta2 = beta2, Beta3 = beta3)
df <- df %>% pivot_longer(cols = c("Beta1", "Beta2", "Beta3"), names_to = "time", values_to = "Y")
convertBeta <- function(beta) {
if (beta == "Beta1") {
return(1)
}
else if (beta == "Beta2") {
return(2)
}
else if (beta == "Beta3") {
return(3)
}
return(0)
}
df$time <- as.factor(unlist(lapply(df$time, convertBeta)))
df$Gender <- as.factor(df$Gender)
df$Y <- as.factor(df$Y)
any(is.na(df$Y))
library(geepack)
library(tidyr)
suppressPackageStartupMessages(library(dplyr))
gender <- c(rep("Male", 813), rep("Female", 1037))
beta1 <- c(c(rep(1, 342), rep(1, 26), rep(0, 6), rep(0, 21), rep(1, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(0, 14), rep(0, 18), rep(1, 14), rep(1, 47), rep(0, 22), rep(0, 457)))
beta2 <- c(c(rep(1, 342), rep(1, 26), rep(1, 6), rep(1, 21), rep(0, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(1, 14), rep(1, 18), rep(0, 14), rep(0, 47), rep(0, 22), rep(0, 457)))
beta3 <- c(c(rep(1, 342), rep(0, 26), rep(1, 6), rep(0, 21), rep(1, 11), rep(0, 32), rep(1, 19), rep(0, 356)), c(rep(1, 440), rep(0, 25), rep(1, 14), rep(0, 18), rep(1, 14), rep(0, 47), rep(1, 22), rep(0, 457)))
id <- 1:length(gender)
df <- data.frame(ID = id, Gender = gender, Beta1 = beta1, Beta2 = beta2, Beta3 = beta3)
df <- df %>% pivot_longer(cols = c("Beta1", "Beta2", "Beta3"), names_to = "time", values_to = "Y")
convertBeta <- function(beta) {
if (beta == "Beta1") {
return(1)
}
else if (beta == "Beta2") {
return(2)
}
else if (beta == "Beta3") {
return(3)
}
return(0)
}
df$time <- as.factor(unlist(lapply(df$time, convertBeta)))
df$Gender <- as.factor(df$Gender)
model <- geeglm(Y ~ Gender + time, id = ID, family = binomial, corstr = "unstructured", data = df)
summary(model)
library(geepack)
library(tidyr)
suppressPackageStartupMessages(library(dplyr))
gender <- c(rep("Male", 813), rep("Female", 1037))
beta1 <- c(c(rep(1, 342), rep(1, 26), rep(0, 6), rep(0, 21), rep(1, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(0, 14), rep(0, 18), rep(1, 14), rep(1, 47), rep(0, 22), rep(0, 457)))
beta2 <- c(c(rep(1, 342), rep(1, 26), rep(1, 6), rep(1, 21), rep(0, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(1, 14), rep(1, 18), rep(0, 14), rep(0, 47), rep(0, 22), rep(0, 457)))
beta3 <- c(c(rep(1, 342), rep(0, 26), rep(1, 6), rep(0, 21), rep(1, 11), rep(0, 32), rep(1, 19), rep(0, 356)), c(rep(1, 440), rep(0, 25), rep(1, 14), rep(0, 18), rep(1, 14), rep(0, 47), rep(1, 22), rep(0, 457)))
id <- 1:length(gender)
df <- data.frame(ID = id, Gender = gender, Beta1 = beta1, Beta2 = beta2, Beta3 = beta3)
df <- df %>% pivot_longer(cols = c("Beta1", "Beta2", "Beta3"), names_to = "time", values_to = "Y")
convertBeta <- function(beta) {
if (beta == "Beta1") {
return(1)
}
else if (beta == "Beta2") {
return(2)
}
else if (beta == "Beta3") {
return(3)
}
return(0)
}
df$time <- as.factor(unlist(lapply(df$time, convertBeta)))
df$Gender <- as.factor(df$Gender)
print(!complete.cases(df))
library(geepack)
library(tidyr)
suppressPackageStartupMessages(library(dplyr))
gender <- c(rep("Male", 813), rep("Female", 1037))
beta1 <- c(c(rep(1, 342), rep(1, 26), rep(0, 6), rep(0, 21), rep(1, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(0, 14), rep(0, 18), rep(1, 14), rep(1, 47), rep(0, 22), rep(0, 457)))
beta2 <- c(c(rep(1, 342), rep(1, 26), rep(1, 6), rep(1, 21), rep(0, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(1, 14), rep(1, 18), rep(0, 14), rep(0, 47), rep(0, 22), rep(0, 457)))
beta3 <- c(c(rep(1, 342), rep(0, 26), rep(1, 6), rep(0, 21), rep(1, 11), rep(0, 32), rep(1, 19), rep(0, 356)), c(rep(1, 440), rep(0, 25), rep(1, 14), rep(0, 18), rep(1, 14), rep(0, 47), rep(1, 22), rep(0, 457)))
id <- 1:length(gender)
df <- data.frame(ID = id, Gender = gender, Beta1 = beta1, Beta2 = beta2, Beta3 = beta3)
df <- df %>% pivot_longer(cols = c("Beta1", "Beta2", "Beta3"), names_to = "time", values_to = "Y")
convertBeta <- function(beta) {
if (beta == "Beta1") {
return(1)
}
else if (beta == "Beta2") {
return(2)
}
else if (beta == "Beta3") {
return(3)
}
return(0)
}
df$time <- as.factor(unlist(lapply(df$time, convertBeta)))
df$Gender <- as.factor(df$Gender)
print(df[!complete.cases(df), ])
library(geepack)
library(tidyr)
suppressPackageStartupMessages(library(dplyr))
gender <- c(rep("Male", 813), rep("Female", 1037))
beta1 <- c(c(rep(1, 342), rep(1, 26), rep(0, 6), rep(0, 21), rep(1, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(0, 14), rep(0, 18), rep(1, 14), rep(1, 47), rep(0, 22), rep(0, 457)))
beta2 <- c(c(rep(1, 342), rep(1, 26), rep(1, 6), rep(1, 21), rep(0, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(1, 14), rep(1, 18), rep(0, 14), rep(0, 47), rep(0, 22), rep(0, 457)))
beta3 <- c(c(rep(1, 342), rep(0, 26), rep(1, 6), rep(0, 21), rep(1, 11), rep(0, 32), rep(1, 19), rep(0, 356)), c(rep(1, 440), rep(0, 25), rep(1, 14), rep(0, 18), rep(1, 14), rep(0, 47), rep(1, 22), rep(0, 457)))
id <- 1:length(gender)
df <- data.frame(ID = id, Gender = gender, Beta1 = beta1, Beta2 = beta2, Beta3 = beta3)
df <- df %>% pivot_longer(cols = c("Beta1", "Beta2", "Beta3"), names_to = "time", values_to = "Y")
convertBeta <- function(beta) {
if (beta == "Beta1") {
return(1)
}
else if (beta == "Beta2") {
return(2)
}
else if (beta == "Beta3") {
return(3)
}
return(0)
}
df$time <- as.factor(unlist(lapply(df$time, convertBeta)))
df$Gender <- as.factor(df$Gender)
model <- geeglm(Y ~ Gender + relevel(time, rf = "1"), id = ID, family = binomial, corstr = "unstructured", data = df)
library(geepack)
library(tidyr)
suppressPackageStartupMessages(library(dplyr))
gender <- c(rep("Male", 813), rep("Female", 1037))
beta1 <- c(c(rep(1, 342), rep(1, 26), rep(0, 6), rep(0, 21), rep(1, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(0, 14), rep(0, 18), rep(1, 14), rep(1, 47), rep(0, 22), rep(0, 457)))
beta2 <- c(c(rep(1, 342), rep(1, 26), rep(1, 6), rep(1, 21), rep(0, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(1, 14), rep(1, 18), rep(0, 14), rep(0, 47), rep(0, 22), rep(0, 457)))
beta3 <- c(c(rep(1, 342), rep(0, 26), rep(1, 6), rep(0, 21), rep(1, 11), rep(0, 32), rep(1, 19), rep(0, 356)), c(rep(1, 440), rep(0, 25), rep(1, 14), rep(0, 18), rep(1, 14), rep(0, 47), rep(1, 22), rep(0, 457)))
id <- 1:length(gender)
df <- data.frame(ID = id, Gender = gender, Beta1 = beta1, Beta2 = beta2, Beta3 = beta3)
df <- df %>% pivot_longer(cols = c("Beta1", "Beta2", "Beta3"), names_to = "time", values_to = "Y")
convertBeta <- function(beta) {
if (beta == "Beta1") {
return(1)
}
else if (beta == "Beta2") {
return(2)
}
else if (beta == "Beta3") {
return(3)
}
return(0)
}
df$time <- as.factor(unlist(lapply(df$time, convertBeta)))
df$Gender <- as.factor(df$Gender)
model <- geeglm(Y ~ Gender + relevel(time, ref = "1"), id = ID, family = binomial, corstr = "unstructured", data = df)
summary(model)
library(geepack)
library(tidyr)
suppressPackageStartupMessages(library(dplyr))
gender <- c(rep("Male", 813), rep("Female", 1037))
beta1 <- c(c(rep(1, 342), rep(1, 26), rep(0, 6), rep(0, 21), rep(1, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(0, 14), rep(0, 18), rep(1, 14), rep(1, 47), rep(0, 22), rep(0, 457)))
beta2 <- c(c(rep(1, 342), rep(1, 26), rep(1, 6), rep(1, 21), rep(0, 11), rep(1, 32), rep(0, 19), rep(0, 356)), c(rep(1, 440), rep(1, 25), rep(1, 14), rep(1, 18), rep(0, 14), rep(0, 47), rep(0, 22), rep(0, 457)))
beta3 <- c(c(rep(1, 342), rep(0, 26), rep(1, 6), rep(0, 21), rep(1, 11), rep(0, 32), rep(1, 19), rep(0, 356)), c(rep(1, 440), rep(0, 25), rep(1, 14), rep(0, 18), rep(1, 14), rep(0, 47), rep(1, 22), rep(0, 457)))
id <- 1:length(gender)
df <- data.frame(ID = id, Gender = gender, Beta1 = beta1, Beta2 = beta2, Beta3 = beta3)
df <- df %>% pivot_longer(cols = c("Beta1", "Beta2", "Beta3"), names_to = "time", values_to = "Y")
convertBeta <- function(beta) {
if (beta == "Beta1") {
return(1)
}
else if (beta == "Beta2") {
return(2)
}
else if (beta == "Beta3") {
return(3)
}
return(0)
}
df$time <- as.factor(unlist(lapply(df$time, convertBeta)))
df$Gender <- as.factor(df$Gender)
model <- geeglm(Y ~ Gender + relevel(time, ref = "1"), id = ID, family = binomial, corstr = "unstructured", data = df)
summary(model)
library(pander)
QIC_1 <- QIC(model1)
help(QIC)
install.packages("multcomp")
