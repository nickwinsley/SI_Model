x = x[!is.na(x)]
mu = mean(x)
n = length(x)
sum((x - mu)^(2))/(n - 1)
}
var_0 = 10
mu_0 = 10
v_0 = 20
k_0 = 5
n <- compute_n(y)
n <- data.frame(n)
s_square <- s_sq(y)
n$s_sq <- s_square
mu <- mean1(y)
n$mu <- mu
v_n = n[['n']] + v_0
k_n = n[['n']] + k_0
n$k <- k_n
n$v <- v_n
data = n %>% mutate(mu = (k_0*mu_0 + n*mu)/k, sigma_n_sq = (v_0*var_0 + (n - 1)*s_sq + (mu - mu_0)^(2)*k_0*n/k)/v, alpha = v/2, beta = sigma_n_sq*alpha, post_sigma = beta/(alpha - 1)) %>% select(mu, alpha, beta, post_sigma)
colnames(data) <- c("Posterior mean of $\\theta$ given $\\sigma^{2}$", "$\\alpha$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$\\beta$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$E(\sigma^{2}|\mathbf(Y))$")
# Read in students' studying time data.
studying <- read.csv("Exam Period Studying.csv")
y <- na.omit(unlist(studying))
compute_n <- function(x) {
sum(!is.na(x))
}
mean1 <- function(x) {
x = x[!is.na(x)]
mean(x)
}
s_sq <- function(x) {
x = x[!is.na(x)]
mu = mean(x)
n = length(x)
sum((x - mu)^(2))/(n - 1)
}
var_0 = 10
mu_0 = 10
v_0 = 20
k_0 = 5
n <- compute_n(y)
n <- data.frame(n)
s_square <- s_sq(y)
n$s_sq <- s_square
mu <- mean1(y)
n$mu <- mu
v_n = n[['n']] + v_0
k_n = n[['n']] + k_0
n$k <- k_n
n$v <- v_n
data = n %>% mutate(mu = (k_0*mu_0 + n*mu)/k, sigma_n_sq = (v_0*var_0 + (n - 1)*s_sq + (mu - mu_0)^(2)*k_0*n/k)/v, alpha = v/2, beta = sigma_n_sq*alpha, post_sigma = beta/(alpha - 1)) %>% select(mu, alpha, beta, post_sigma)
colnames(data) <- c("Posterior mean of $\\theta$ given $\\sigma^{2}$", "$\\alpha$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$\\beta$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$E(\\sigma^{2}|\mathbf(Y))$")
# Read in students' studying time data.
studying <- read.csv("Exam Period Studying.csv")
y <- na.omit(unlist(studying))
compute_n <- function(x) {
sum(!is.na(x))
}
mean1 <- function(x) {
x = x[!is.na(x)]
mean(x)
}
s_sq <- function(x) {
x = x[!is.na(x)]
mu = mean(x)
n = length(x)
sum((x - mu)^(2))/(n - 1)
}
var_0 = 10
mu_0 = 10
v_0 = 20
k_0 = 5
n <- compute_n(y)
n <- data.frame(n)
s_square <- s_sq(y)
n$s_sq <- s_square
mu <- mean1(y)
n$mu <- mu
v_n = n[['n']] + v_0
k_n = n[['n']] + k_0
n$k <- k_n
n$v <- v_n
data = n %>% mutate(mu = (k_0*mu_0 + n*mu)/k, sigma_n_sq = (v_0*var_0 + (n - 1)*s_sq + (mu - mu_0)^(2)*k_0*n/k)/v, alpha = v/2, beta = sigma_n_sq*alpha, post_sigma = beta/(alpha - 1)) %>% select(mu, alpha, beta, post_sigma)
colnames(data) <- c("Posterior mean of $\\theta$ given $\\sigma^{2}$", "$\\alpha$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$\\beta$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$E(\\sigma^{2}|\\mathbf(Y))$")
knitr::kable(data)
# Read in students' studying time data.
studying <- read.csv("Exam Period Studying.csv")
y <- na.omit(unlist(studying))
compute_n <- function(x) {
sum(!is.na(x))
}
mean1 <- function(x) {
x = x[!is.na(x)]
mean(x)
}
s_sq <- function(x) {
x = x[!is.na(x)]
mu = mean(x)
n = length(x)
sum((x - mu)^(2))/(n - 1)
}
var_0 = 10
mu_0 = 10
v_0 = 20
k_0 = 5
n <- compute_n(y)
n <- data.frame(n)
s_square <- s_sq(y)
n$s_sq <- s_square
mu <- mean1(y)
n$mu <- mu
v_n = n[['n']] + v_0
k_n = n[['n']] + k_0
n$k <- k_n
n$v <- v_n
data = n %>% mutate(mu = (k_0*mu_0 + n*mu)/k, sigma_n_sq = (v_0*var_0 + (n - 1)*s_sq + (mu - mu_0)^(2)*k_0*n/k)/v, alpha = v/2, beta = sigma_n_sq*alpha, post_sigma = beta/(alpha - 1)) %>% select(mu, alpha, beta, post_sigma)
colnames(data) <- c("Posterior mean of $\\theta$ given $\\sigma^{2}$", "$\\alpha$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$\\beta$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$E(\\sigma^{2}|\\mathbf{Y})$")
knitr::kable(data)
# Read in students' studying time data.
studying <- read.csv("Exam Period Studying.csv")
y <- na.omit(unlist(studying))
compute_n <- function(x) {
sum(!is.na(x))
}
mean1 <- function(x) {
x = x[!is.na(x)]
mean(x)
}
s_sq <- function(x) {
x = x[!is.na(x)]
mu = mean(x)
n = length(x)
sum((x - mu)^(2))/(n - 1)
}
var_0 = 10
mu_0 = 10
v_0 = 20
k_0 = 5
n <- compute_n(y)
n <- data.frame(n)
s_square <- s_sq(y)
n$s_sq <- s_square
mu <- mean1(y)
n$mu <- mu
v_n = n[['n']] + v_0
k_n = n[['n']] + k_0
n$k <- k_n
n$v <- v_n
data = n %>% mutate(mu = (k_0*mu_0 + n*mu)/k, sigma_n_sq = (v_0*var_0 + (n - 1)*s_sq + (mu - mu_0)^(2)*k_0*n/k)/v, alpha = v/2, beta = sigma_n_sq*alpha, post_sigma = beta/(alpha - 1)) %>% select(mu, alpha, beta, post_sigma)
colnames(data) <- c("Posterior mean of $\\theta$ given $\\sigma^{2}$", "$\\alpha$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$\\beta$ for the Inverse Gamma distribution of $\\sigma^{2}, \mathbf{Y}$", "$E(\\sigma^{2}|\\mathbf{Y})$")
# Read in students' studying time data.
studying <- read.csv("Exam Period Studying.csv")
y <- na.omit(unlist(studying))
compute_n <- function(x) {
sum(!is.na(x))
}
mean1 <- function(x) {
x = x[!is.na(x)]
mean(x)
}
s_sq <- function(x) {
x = x[!is.na(x)]
mu = mean(x)
n = length(x)
sum((x - mu)^(2))/(n - 1)
}
var_0 = 10
mu_0 = 10
v_0 = 20
k_0 = 5
n <- compute_n(y)
n <- data.frame(n)
s_square <- s_sq(y)
n$s_sq <- s_square
mu <- mean1(y)
n$mu <- mu
v_n = n[['n']] + v_0
k_n = n[['n']] + k_0
n$k <- k_n
n$v <- v_n
data = n %>% mutate(mu = (k_0*mu_0 + n*mu)/k, sigma_n_sq = (v_0*var_0 + (n - 1)*s_sq + (mu - mu_0)^(2)*k_0*n/k)/v, alpha = v/2, beta = sigma_n_sq*alpha, post_sigma = beta/(alpha - 1)) %>% select(mu, alpha, beta, post_sigma)
colnames(data) <- c("Posterior mean of $\\theta$ given $\\sigma^{2}$", "$\\alpha$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$\\beta$ for the Inverse Gamma distribution of $\\sigma^{2}, \\mathbf{Y}$", "$E(\\sigma^{2}|\\mathbf{Y})$")
knitr::kable(data)
# Read in students' studying time data.
studying <- read.csv("Exam Period Studying.csv")
y <- na.omit(unlist(studying))
compute_n <- function(x) {
sum(!is.na(x))
}
mean1 <- function(x) {
x = x[!is.na(x)]
mean(x)
}
s_sq <- function(x) {
x = x[!is.na(x)]
mu = mean(x)
n = length(x)
sum((x - mu)^(2))/(n - 1)
}
var_0 = 10
mu_0 = 10
v_0 = 20
k_0 = 5
n <- compute_n(y)
n <- data.frame(n)
s_square <- s_sq(y)
n$s_sq <- s_square
mu <- mean1(y)
n$mu <- mu
v_n = n[['n']] + v_0
k_n = n[['n']] + k_0
n$k <- k_n
n$v <- v_n
data = n %>% mutate(mu = (k_0*mu_0 + n*mu)/k, sigma_n_sq = (v_0*var_0 + (n - 1)*s_sq + (mu - mu_0)^(2)*k_0*n/k)/v, alpha = v/2, beta = sigma_n_sq*alpha, post_sigma = beta/(alpha - 1)) %>% select(mu, alpha, beta, post_sigma)
colnames(data) <- c("Posterior mean of $\\theta$ given $\\sigma^{2}$", "$\\alpha$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$\\beta$ for the Inverse Gamma distribution of $\\sigma^{2}, \\mathbf{Y}$", "$E(\\sigma^{2} | \\mathbf{Y})$")
knitr::kable(data)
# Read in students' studying time data.
studying <- read.csv("Exam Period Studying.csv")
y <- na.omit(unlist(studying))
compute_n <- function(x) {
sum(!is.na(x))
}
mean1 <- function(x) {
x = x[!is.na(x)]
mean(x)
}
s_sq <- function(x) {
x = x[!is.na(x)]
mu = mean(x)
n = length(x)
sum((x - mu)^(2))/(n - 1)
}
var_0 = 10
mu_0 = 10
v_0 = 20
k_0 = 5
n <- compute_n(y)
n <- data.frame(n)
s_square <- s_sq(y)
n$s_sq <- s_square
mu <- mean1(y)
n$mu <- mu
v_n = n[['n']] + v_0
k_n = n[['n']] + k_0
n$k <- k_n
n$v <- v_n
data = n %>% mutate(mu = (k_0*mu_0 + n*mu)/k, sigma_n_sq = (v_0*var_0 + (n - 1)*s_sq + (mu - mu_0)^(2)*k_0*n/k)/v, alpha = v/2, beta = sigma_n_sq*alpha, post_sigma = beta/(alpha - 1)) %>% select(mu, alpha, beta, post_sigma)
colnames(data) <- c("Posterior mean of $\\theta$ given $\\sigma^{2}, \\mathbf{Y}$", "$\\alpha$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$\\beta$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$E(\\sigma^{2} \textbar \\mathbf{Y})$")
knitr::kable(data)
# Read in students' studying time data.
studying <- read.csv("Exam Period Studying.csv")
y <- na.omit(unlist(studying))
compute_n <- function(x) {
sum(!is.na(x))
}
mean1 <- function(x) {
x = x[!is.na(x)]
mean(x)
}
s_sq <- function(x) {
x = x[!is.na(x)]
mu = mean(x)
n = length(x)
sum((x - mu)^(2))/(n - 1)
}
var_0 = 10
mu_0 = 10
v_0 = 20
k_0 = 5
n <- compute_n(y)
n <- data.frame(n)
s_square <- s_sq(y)
n$s_sq <- s_square
mu <- mean1(y)
n$mu <- mu
v_n = n[['n']] + v_0
k_n = n[['n']] + k_0
n$k <- k_n
n$v <- v_n
data = n %>% mutate(mu = (k_0*mu_0 + n*mu)/k, sigma_n_sq = (v_0*var_0 + (n - 1)*s_sq + (mu - mu_0)^(2)*k_0*n/k)/v, alpha = v/2, beta = sigma_n_sq*alpha, post_sigma = beta/(alpha - 1)) %>% select(mu, alpha, beta, post_sigma)
colnames(data) <- c("Posterior mean of $\\theta$ given $\\sigma^{2}, \\mathbf{Y}$", "$\\alpha$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$\\beta$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$E(\\sigma^{2} \\textbar \\mathbf{Y})$")
knitr::kable(data)
# Read in students' studying time data.
studying <- read.csv("Exam Period Studying.csv")
y <- na.omit(unlist(studying))
compute_n <- function(x) {
sum(!is.na(x))
}
mean1 <- function(x) {
x = x[!is.na(x)]
mean(x)
}
s_sq <- function(x) {
x = x[!is.na(x)]
mu = mean(x)
n = length(x)
sum((x - mu)^(2))/(n - 1)
}
var_0 = 10
mu_0 = 10
v_0 = 20
k_0 = 5
n <- compute_n(y)
n <- data.frame(n)
s_square <- s_sq(y)
n$s_sq <- s_square
mu <- mean1(y)
n$mu <- mu
v_n = n[['n']] + v_0
k_n = n[['n']] + k_0
n$k <- k_n
n$v <- v_n
data = n %>% mutate(mu1 = (k_0*mu_0 + n*mu)/k, sigma_n_sq = (v_0*var_0 + (n - 1)*s_sq + (mu - mu_0)^(2)*k_0*n/k)/v, alpha = v/2, beta = sigma_n_sq*alpha, post_sigma = beta/(alpha - 1)) %>% select(mu1, alpha, beta, post_sigma)
colnames(data) <- c("Posterior mean of $\\theta$ given $\\sigma^{2}, \\mathbf{Y}$", "$\\alpha$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$\\beta$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$E(\\sigma^{2} \\textbar \\mathbf{Y})$")
knitr::kable(data)
colnames(data) <- c("mu_theta", "alpha", "beta", "sigma_sq")
prior_sigma_sq = 100/(10 - 1)
prior_var_sigma = 100^(2)/((10 - 1)^(2)(10 - 2))
colnames(data) <- c("mu_theta", "alpha", "beta", "sigma_sq")
prior_sigma_sq = 100/(10 - 1)
prior_var_sigma = 100^(2) / ((10 - 1)^(2)(10 - 2))
colnames(data) <- c("mu_theta", "alpha", "beta", "sigma_sq")
prior_sigma_sq = 100/(10 - 1)
prior_var_sigma = 100^2 / ((10 - 1)^(2)(10 - 2))
colnames(data) <- c("mu_theta", "alpha", "beta", "sigma_sq")
prior_sigma_sq = 100/(10 - 1)
prior_var_sigma = 100^2 / ((10 - 1)^(2)*(10 - 2))
posterior_sigma_sq = data[['sigma_sq']]
posterior_var_sigma = data[['beta']]^(2)/((data[['alpha']] - 1)^(2)*(data[['alpha']] - 2))
prior_theta = 10
prior_var_theta = 2
posterior_theta = data[['mu_theta']]
posterior_var_theta = data[['sigma_sq']]/(5 + compute_n(y))
compute_n(y)
# Read in students' studying time data.
studying <- read.csv("Exam Period Studying.csv")
y <- na.omit(unlist(studying))
compute_n <- function(x) {
sum(!is.na(x))
}
mean1 <- function(x) {
x = x[!is.na(x)]
mean(x)
}
s_sq <- function(x) {
x = x[!is.na(x)]
mu = mean(x)
n = length(x)
sum((x - mu)^(2))/(n - 1)
}
var_0 = 10
mu_0 = 10
v_0 = 20
k_0 = 5
n <- compute_n(y)
n <- data.frame(n)
s_square <- s_sq(y)
print(s_square)
n$s_sq <- s_square
mu <- mean1(y)
print(mu)
n$mu <- mu
v_n = n[['n']] + v_0
k_n = n[['n']] + k_0
n$k <- k_n
n$v <- v_n
data = n %>% mutate(mu1 = (k_0*mu_0 + n*mu)/k, sigma_n_sq = (v_0*var_0 + (n - 1)*s_sq + (mu - mu_0)^(2)*k_0*n/k)/v, alpha = v/2, beta = sigma_n_sq*alpha, post_sigma = beta/(alpha - 1)) %>% select(mu1, alpha, beta, post_sigma)
colnames(data) <- c("Posterior mean of $\\theta$ given $\\sigma^{2}, \\mathbf{Y}$", "$\\alpha$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$\\beta$ for the Inverse Gamma distribution of $\\sigma^{2}$", "$E(\\sigma^{2} \\textbar \\mathbf{Y})$")
knitr::kable(data)
rmdcount("TemporalPrestige.Rmd")
library(rmdwc)
rmdcount("TemporalPrestige.Rmd")
rmdcount("C:\Users\nickw\Downloads\SI_Model\TemporalPrestige.Rmd")
rmdcount("C:\\Users\\nickw\\Downloads\\SI_Model\\TemporalPrestige.Rmd")
cc.data = read.csv("/covidcard/nz_latest_extract.csv", stringsAsFactors = FALSE)
cc.data = read.csv("covidcard/nz_latest_extract.csv", stringsAsFactors = FALSE)
cc.time = read.csv("covidcard/date_time.csv", stringsAsFactors = FALSE)
getwd()
getwd()
setwd("C:\Users\nickw\Downloads\SI_Model")
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
cc.data = read.csv("covidcard/nz_latest_extract.csv", stringsAsFactors = FALSE)
cc.time = read.csv("covidcard/date_time.csv", stringsAsFactors = FALSE)
cc.data$ExposureDateTime = as_datetime(cc.time$ExposureDateTime)
real.ids = read.csv("/covidcard/card_ids_for_analysis.csv", stringsAsFactors = FALSE)
real.ids = read.csv("covidcard/card_ids_for_analysis.csv", stringsAsFactors = FALSE)
library(lubridate)
install.packages("lubridate")
library(lubridate)
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
cc.data = read.csv("covidcard/nz_latest_extract.csv", stringsAsFactors = FALSE)
cc.time = read.csv("covidcard/date_time.csv", stringsAsFactors = FALSE)
cc.data$ExposureDateTime = as_datetime(cc.time$ExposureDateTime)
real.ids = read.csv("covidcard/card_ids_for_analysis.csv", stringsAsFactors = FALSE)
cc.data$date_stamp = as.Date(cc.data$ExposureDateTime)
trial_days <- c("2020-11-09","2020-11-10","2020-11-11", "2020-11-12","2020-11-13","2020-11-14", "2020-11-15")
cc.data$date_stamp_char = as.character(cc.date_stamp)
cc.data$date_stamp_char = as.character(cc.data$date_stamp)
cc.data$upload_date <- as.Date(cc.data$UploadDateTime)
cc.data$UploadDateTime = as_datetime(cc.data$UploadDateTime)
library(lubridate)
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
cc.data = read.csv("covidcard/nz_latest_extract.csv", stringsAsFactors = FALSE)
cc.time = read.csv("covidcard/date_time.csv", stringsAsFactors = FALSE)
cc.data$ExposureDateTime = as_datetime(cc.time$ExposureDateTime)
real.ids = read.csv("covidcard/card_ids_for_analysis.csv", stringsAsFactors = FALSE)
cc.data$date_stamp = as.Date(cc.data$ExposureDateTime)
trial_days <- c("2020-11-09","2020-11-10","2020-11-11", "2020-11-12","2020-11-13","2020-11-14", "2020-11-15")
cc.data$date_stamp_char = as.character(cc.data$date_stamp)
cc.data$UploadDateTime = as_datetime(cc.data$UploadDateTime)
cc.data$UploadDateTime = as_datetime(cc.time$UploadDateTime)
cc.data$upload_date <- as.Date(cc.data$UploadDateTime)
cc.data$upload_date_char <- as.character(cc.data$upload_date)
cc.data.sub = filter(cc.data, date_stamp_char %in% trial_days)
cc.data$date_stamp_char = as.character(cc.data$date_stamp)
cc.data$UploadDateTime = as_datetime(cc.time$UploadDateTime)
cc.data$upload_date <- as.Date(cc.data$UploadDateTime)
cc.data$upload_date_char <- as.character(cc.data$upload_date)
cc.time = read.csv("covidcard/date_time.csv", stringsAsFactors = FALSE)
cc.data$ExposureDateTime = as_datetime(cc.time$ExposureDateTime)
real.ids = read.csv("covidcard/card_ids_for_analysis.csv", stringsAsFactors = FALSE)
cc.data$date_stamp = as.Date(cc.data$ExposureDateTime)
trial_days <- c("2020-11-09","2020-11-10","2020-11-11", "2020-11-12","2020-11-13","2020-11-14", "2020-11-15")
cc.data$date_stamp_char = as.character(cc.data$date_stamp)
cc.data$UploadDateTime = as_datetime(cc.time$UploadDateTime)
cc.data$upload_date <- as.Date(cc.data$UploadDateTime)
cc.data$upload_date_char <- as.character(cc.data$upload_date)
cc.data.sub = filter(cc.data, date_stamp_char %in% trial_days)
cc.data.sub = filter(cc.data, cc.data$date_stamp_char %in% trial_days)
cc.data.sub <- filter(cc.data.sub, !(cc.data.sub$upload_date_char == "2020-11-15" & cc.data.sub$date_stamp_char == "2020-11-15"))
class(cc.data.sub)
cc.data$date_stamp_char <- as.character(cc.data$date_stamp)
cc.data$UploadDateTime <- as_datetime(cc.time$UploadDateTime)
cc.data.sub = filter(cc.data, date_stamp_char %in% trial_days)
cc.data.sub = filter(cc.data, !!sym(date_stamp_char) %in% trial_days)
class(cc.data)
cc.data.sub = filter(cc.data, date_stamp_char %in% trial_days)
class(cc.data.sub)
print(colames(cc.data))
print(colnames(cc.data))
cc.data.sub = filter(cc.data, date_stamp_char %in% trial_days)
print(colnames(cc.data))
cc.data.sub = cc.data %>% filter(date_stamp_char %in% trial_days)
library(dplyr)
print(colnames(cc.data))
cc.data.sub = cc.data %>% filter(date_stamp_char %in% trial_days)
class(cc.data.sub)
cc.data.sub <- cc.data.sub %>% filter(!(upload_date_char == "2020-11-15" & date_stamp_char == "2020-11-15"))
cc.data.sub <- cc.data.sub %>% filter((ObservingQRCode %in% real.ids$card_id) & (ObservedQRCode %in% real.ids$card_id))
IDs = sort(unique(c(cc.data.sub$ObservingQRCode, cc.data.sub$ObservedQRCode)))
n = length(IDs)
senders = match(cc.data.sub$ObservingQRCode, IDs)
receivers = match(cc.data.sub$ObservedQRCode, IDs)
for (i in 1:n) {
cc.data.sub <- mutate(cc.data.sub, ObservingQRCode = ifelse(senders == i, i, ObservingQRCode))
cc.data.sub <- mutate(cc.data.sub, ObservedQRCode = ifelse(receivers == i, i, ObservedQRCode))
}
library(lubridate)
library(dplyr)
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
cc.data = read.csv("covidcard/nz_latest_extract.csv", stringsAsFactors = FALSE)
cc.time = read.csv("covidcard/date_time.csv", stringsAsFactors = FALSE)
cc.data$ExposureDateTime = as_datetime(cc.time$ExposureDateTime)
real.ids = read.csv("covidcard/card_ids_for_analysis.csv", stringsAsFactors = FALSE)
cc.data$date_stamp = as.Date(cc.data$ExposureDateTime)
trial_days <- c("2020-11-09","2020-11-10","2020-11-11", "2020-11-12","2020-11-13","2020-11-14", "2020-11-15")
cc.data$date_stamp_char <- as.character(cc.data$date_stamp)
cc.data$UploadDateTime <- as_datetime(cc.time$UploadDateTime)
cc.data$upload_date <- as.Date(cc.data$UploadDateTime)
cc.data$upload_date_char <- as.character(cc.data$upload_date)
print(colnames(cc.data))
cc.data.sub = cc.data %>% filter(date_stamp_char %in% trial_days)
class(cc.data.sub)
cc.data.sub <- cc.data.sub %>% filter(!(upload_date_char == "2020-11-15" & date_stamp_char == "2020-11-15"))
cc.data.sub <- cc.data.sub %>% filter((ObservingQRCode %in% real.ids$card_id) & (ObservedQRCode %in% real.ids$card_id))
IDs = sort(unique(c(cc.data.sub$ObservingQRCode, cc.data.sub$ObservedQRCode)))
n = length(IDs)
senders = match(cc.data.sub$ObservingQRCode, IDs)
receivers = match(cc.data.sub$ObservedQRCode, IDs)
for (i in 1:n) {
cc.data.sub <- mutate(cc.data.sub, ObservingQRCode = ifelse(senders == i, i, ObservingQRCode))
cc.data.sub <- mutate(cc.data.sub, ObservedQRCode = ifelse(receivers == i, i, ObservedQRCode))
}
write.csv(cc.data.sub, file = "Card Data.csv")
library(lubridate)
library(dplyr)
setwd("C:\\Users\\nickw\\Downloads\\SI_Model")
cc.data = read.csv("covidcard/nz_latest_extract.csv", stringsAsFactors = FALSE)
cc.time = read.csv("covidcard/date_time.csv", stringsAsFactors = FALSE)
cc.data$ExposureDateTime = as_datetime(cc.time$ExposureDateTime)
real.ids = read.csv("covidcard/card_ids_for_analysis.csv", stringsAsFactors = FALSE)
cc.data$date_stamp = as.Date(cc.data$ExposureDateTime)
trial_days <- c("2020-11-09","2020-11-10","2020-11-11", "2020-11-12","2020-11-13","2020-11-14", "2020-11-15")
cc.data$date_stamp_char <- as.character(cc.data$date_stamp)
cc.data$UploadDateTime <- as_datetime(cc.time$UploadDateTime)
cc.data$upload_date <- as.Date(cc.data$UploadDateTime)
cc.data$upload_date_char <- as.character(cc.data$upload_date)
print(colnames(cc.data))
cc.data.sub = cc.data %>% filter(date_stamp_char %in% trial_days)
class(cc.data.sub)
cc.data.sub <- cc.data.sub %>% filter(!(upload_date_char == "2020-11-15" & date_stamp_char == "2020-11-15"))
cc.data.sub <- cc.data.sub %>% filter((ObservingQRCode %in% real.ids$card_id) & (ObservedQRCode %in% real.ids$card_id))
IDs = sort(unique(c(cc.data.sub$ObservingQRCode, cc.data.sub$ObservedQRCode)))
n = length(IDs)
senders = match(cc.data.sub$ObservingQRCode, IDs)
receivers = match(cc.data.sub$ObservedQRCode, IDs)
for (i in 1:n) {
cc.data.sub <- mutate(cc.data.sub, ObservingQRCode = ifelse(senders == i, i, ObservingQRCode))
cc.data.sub <- mutate(cc.data.sub, ObservedQRCode = ifelse(receivers == i, i, ObservedQRCode))
}
write.csv(cc.data.sub, file = "Card Data.csv", row.names = FALSE)
